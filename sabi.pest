WHITESPACE = _{ " " | "\t" | NEWLINE }

// The capsule for the program and the 
//  enum for its statements
act = { SOI ~ scene+ ~ EOI }
scene = { "SCENE " ~ scene_num ~ statement* ~ "CURTAIN" }

// There are three types of statements
//  1. Code statements for logic, etc
//  2. Stage directions for changing scenes, backgrounds, sounds, etc
//  3. Dialogue for characters to say things
statement = _{
    code |
    stage_command |
    dialogue
    }

// Stage directions
stage_command = { "(" ~ stage_command_type ~ ")" }
    stage_command_type = _{ 
        gui_change |
        emotion_change |
        background_change }
    gui_change = { "GUI" ~ gui_element ~ "changes" ~ "to" ~ expr }
    background_change = { "Background" ~ "changes" ~ "to" ~ expr }
    emotion_change = { character_name ~ "looks" ~ emotion_name }
    gui_element = { "textbox" | "namebox" }

// Code statements
code = { "{" ~ code_statement ~ "}" }
    code_statement = _{ log }
    // Writes a message to the console
    log = { "log " ~ expr+ }

// Makes a character or the MC say something
dialogue = { character_identifier ~ ": " ~ dialogue_emotion_change? ~ expr ~ (expr | stage_command)* }
    dialogue_emotion_change = { "(" ~ emotion_name ~ ")" }

// Expressions
expr = { term ~ (infix_op ~ term)* }
    term = _{ 
        string | 
        number | 
        "(" ~ expr ~ ")" 
        }
    infix_op = _{ add }
    add = { "+" }

// General types
character_identifier = { 
    mc_identifier |
    character_name
    }
character_name = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHA_LOWER+ }
emotion_name = @{ ASCII_ALPHA+ }
mc_identifier = { "MC" } 

// Intrinsic types
scene_num = @{ ASCII_DIGIT+ }
number    = @{ "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
string    = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }